syntax = "proto3";

import "EmployeeApplication.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";
import "OrganizationBase.proto";

option java_multiple_files = true;
option java_package = "org.myddd.extensions.organization.api";
option java_outer_classname = "OrganizationApplicationProto";
package org.myddd.extensions.organization.api;

service OrganizationApplication {
    /**
      创建一个顶级部门
     */
    rpc CreateTopOrganization(OrganizationDto) returns (OrganizationDto){};

    /**
      创建一个子部门
     */
    rpc CreateDepartment(OrganizationDto) returns (OrganizationDto){};

    /**
     * 用户加入某个组织
     */
    rpc JoinOrganization(JoinOrLeaveOrganizationDto) returns (google.protobuf.BoolValue);

    /**
     * 将某个用户从组织中移除
     */
    rpc LeaveOrganization(JoinOrLeaveOrganizationDto) returns (google.protobuf.BoolValue);

    /**
     * 删除一个部门
     */
    rpc DeleteOrganization(google.protobuf.Int64Value) returns (google.protobuf.BoolValue);

    /**
     * 查询一个用户所有的组织（顶级组织，不包括子部门及子公司)
     */
    rpc QueryTopCompaniesByUserId(google.protobuf.Int64Value) returns (ListOrganizationDto);

    /**
     * 查询一个用户在指定组织下的所有部门
     */
    rpc QueryDepartmentsByEmployeeAndOrg(QueryDepartmentsDto) returns (ListOrganizationDto);

    /**
     * 查询一个顶级组织的所有部门信息
     */
    rpc ListCompanyTrees(QueryCompanyTreeDto) returns (ListOrganizationDto);

    /**
     * 分页搜索公司部门信息
     */
    rpc PageSearchOrganizations(PageQueryDto) returns (PageOrganizationDto);

    /**
     * 分页查询子部门
     */
    rpc PageQueryOrganizations(PageQueryDto) returns (PageOrganizationDto);

    /**
     * 更新一个组织
     */
    rpc UpdateOrganization(OrganizationDto) returns (OrganizationDto);

    /**
     * 查询一个组织下的开放API对应的雇员信息
     */
    rpc QueryOpenApiEmployeeDto(google.protobuf.Int64Value) returns (EmployeeDto);

    /**
     *  查询一个组织的系统管理员
     */
    rpc QueryOrganizationSystemManagerEmployees(google.protobuf.Int64Value) returns (ListEmployeeDto);
}

message QueryDepartmentsDto {
    int64 org_id = 1;
    int64 employee_id = 2;
    bool include_sub_org = 3;
    string search = 4;
}

message QueryCompanyTreeDto {
    int64 org_id = 1;
    repeated int64 limits = 2;
}

message JoinOrLeaveOrganizationDto{
    int64 user_id = 1;
    int64 org_id = 2;
    string operator = 3;
}

message ListOrganizationDto {
    repeated OrganizationDto organizations = 1;
}

message PageOrganizationDto{
    int64 total = 1;
    int64 page = 2;
    int32 page_size = 3;
    repeated OrganizationDto organizations = 4;
}